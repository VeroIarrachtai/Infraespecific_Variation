p1a<- ggplot(datos_filtrados, aes(x = TREATMENT, y = Total, fill = TREATMENT)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(position = position_jitter(0.2), size = 1, aes(color = TREATMENT),alpha = 0.75 ) +  # Agrega puntos
scale_fill_manual(values = c( "#d3453a","#bcb635", "#48b1da","#5cc051", "#697329"),labels= c(CA ="acute", CC ="chronic", AP ="purified air", AE= "ambient air IE", AX= "ambient air SRX"))+
scale_color_manual(values = c( "#d3453a","#bcb635", "#48b1da","#5cc051", "#697329"))
p1a<- ggplot(datos_filtrados, aes(x = TREATMENT, y = Total, fill = TREATMENT)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(position = position_jitter(0.2), size = 1, aes(color = TREATMENT),alpha = 0.75 )
p1a
## Load data
Chloro_data<- read.xlsx("../metadata/ABS_2.xlsx", sheet = 1)  # Puedes ajustar el número de hoja según tu archivo
Chloro_data$chlo_A<-(12.25*(Chloro_data$NM664-0.044))-(2.79*(Chloro_data$NM647-0.044))
Chloro_data$chlo_B<-(21.5*(Chloro_data$NM647-0.044))-(5.1*(Chloro_data$NM664-0.044))
Chloro_data$Total<-(Chloro_data$chlo_A+Chloro_data$chlo_B)
# Filtrar los datos para eliminar ciertos tratamientos
datos_filtrados <- Chloro_data %>%
filter(!TREATMENT %in% c("VACIO", "BLANCO"))
datos_filtrados <- Chloro_data %>%
filter(!DAY %in% c("DIA01"))
p1a<- ggplot(datos_filtrados, aes(x = TREATMENT, y = Total, fill = TREATMENT)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(position = position_jitter(0.2), size = 1, aes(color = TREATMENT),alpha = 0.75 )
p1a
View(datos_filtrados)
setwd("~/Documents/GitHub/Infraespecific_Variation/bin")
GBS <- read.csv("../metadata/GBS.csv")  # Puedes ajustar el número de hoja según tu archivo
View(GBS)
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")  # Puedes ajustar el número de hoja según tu archivo
View(forest_monitoring)
forest_monitoring$ID_match <- paste(forest_monitoring$tree_number, forest_monitoring$sampled)
forest_monitoring$ID_match
forest_monitoring$ID_match <- paste0(forest_monitoring$tree_number, forest_monitoring$sampled)
forest_monitoring$ID_match
View(forest_monitoring)
GBS <- read.csv("../metadata/GBS.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
#Crear columna con info para hacer match con la columna de la dataframe GBS
forest_monitoring$ID_match <- paste0(forest_monitoring$tree_number, forest_monitoring$sampled)
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
knitr::opts_chunk$set(echo = TRUE)
#Load libraries
library(openxlsx)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)
library(car)
library(MASS)
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
knitr::opts_chunk$set(echo = TRUE)
GBS <- read.csv("../metadata/GBS.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
library(dplyr)
library(tidyr)
library(ggpubr)
library(car)
library(MASS)
#Load libraries
library(openxlsx)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)
library(car)
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
GBS <- read.csv("../metadata/GBS.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
df_combined <- GBS %>%
left_join(forest_monitoring %>% select(locality_key,plot,X_coordinates_latitude,	X_coordinates_longitude,	X_coordinates_altitude, person_key,	tree_number, tree_diameter_category,	tree_heigth,	tree_nodes, ozone_damage_percentage,	other_damages_percentage,	other_damages_percentage.less_10,	other_damages_percentage.10.40,	other_damages_percentage.50,	other_damages_percentage.50.70,	other_damages_percentage.70.100, bud, branch_nodes,	nodes_with_leaves, cones,cone_sex, tree_exposition, surronding_vegetation.fir,	surronding_vegetation.pine,	surronding_vegetation.oak,	surronding_vegetation.bush,	surronding_vegetation.grass,	surronding_vegetation.other,	reforested), by = "tree_id")
df_combined <- merge(
x = GBS,
y = forest_monitoring[, c("locality_key","plot","X_coordinates_latitude",	"X_coordinates_longitude",	"X_coordinates_altitude", "person_key",	"tree_number", "tree_diameter_category",	"tree_heigth,	tree_nodes", "ozone_damage_percentage",	"other_damages_percentage",	"other_damages_percentage.less_10",	"other_damages_percentage.10.40",	"other_damages_percentage.50",	"other_damages_percentage.50.70",	"other_damages_percentage.70.100", "bud, branch_nodes",	"nodes_with_leaves", "cones,cone_sex", "tree_exposition", "surronding_vegetation.fir",	"surronding_vegetation.pine",	"surronding_vegetation.oak",	"surronding_vegetation.bush",	"surronding_vegetation.grass",	"surronding_vegetation.other",	"reforested")],  # Selección de columnas específicas
by = "tree_id",
all.x = TRUE  # Left join
)
#Load libraries
library(tidyverse)
#Load libraries
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
#Load libraries
library(tidyverse)
install.packages("tidyverse")
library(openxlsx)
df_combined <- merge(
x = GBS,
y = forest_monitoring[, c("locality_key","plot","X_coordinates_latitude",	"X_coordinates_longitude",	"X_coordinates_altitude", "person_key",	"tree_number", "tree_diameter_category",	"tree_heigth,	tree_nodes", "ozone_damage_percentage",	"other_damages_percentage",	"other_damages_percentage.less_10",	"other_damages_percentage.10.40",	"other_damages_percentage.50",	"other_damages_percentage.50.70",	"other_damages_percentage.70.100", "bud, branch_nodes",	"nodes_with_leaves", "cones,cone_sex", "tree_exposition", "surronding_vegetation.fir",	"surronding_vegetation.pine",	"surronding_vegetation.oak",	"surronding_vegetation.bush",	"surronding_vegetation.grass",	"surronding_vegetation.other",	"reforested")],  # Selección de columnas específicas
by = "tree_id",
all.x = TRUE  # Left join
)
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested")]
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id", all.x = TRUE)
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id")
#Crear columna con info para hacer match con la columna de la dataframe GBS
forest_monitoring$ID_match <- paste0(forest_monitoring$tree_number, forest_monitoring$sampled)
GBS <- read.csv("../metadata/GBS.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
#Crear columna con info para hacer match con la columna de la dataframe GBS
forest_monitoring$ID_match <- paste0(forest_monitoring$tree_number, forest_monitoring$sampled)
df_combined <- merge(
x = GBS,
y = forest_monitoring[, c("locality_key","plot","X_coordinates_latitude",	"X_coordinates_longitude",	"X_coordinates_altitude", "person_key",	"tree_number", "tree_diameter_category",	"tree_heigth,	tree_nodes", "ozone_damage_percentage",	"other_damages_percentage",	"other_damages_percentage.less_10",	"other_damages_percentage.10.40",	"other_damages_percentage.50",	"other_damages_percentage.50.70",	"other_damages_percentage.70.100", "bud, branch_nodes",	"nodes_with_leaves", "cones,cone_sex", "tree_exposition", "surronding_vegetation.fir",	"surronding_vegetation.pine",	"surronding_vegetation.oak",	"surronding_vegetation.bush",	"surronding_vegetation.grass",	"surronding_vegetation.other",	"reforested")],  # Selección de columnas específicas
by = "tree_id",
all.x = TRUE  # Left join
)
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id")
View(df_combined)
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
View(df_combined)
View(forest_selected)
View(GBS)
View(forest_selected)
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
GBS <- read.csv("../metadata/GBS.csv")
View(forest_monitoring)
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
View(forest_selected)
GBS <- read.csv("../metadata/GBS.csv")
forest_monitoring <- read.csv("../metadata/muestreo_dic2020_tidy.csv")
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
View(df_combined)
GBS <- read.xlsx("../metadata/GBS.csv")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.csv")
GBS <- read.xlsx("../metadata/GBS.xlsx")
knitr::opts_chunk$set(echo = TRUE)
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xltx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xltx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xlsx")
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
View(GBS)
GBS <- read.xlsx("../metadata/GBS.xlsx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xlsx")
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
View(df_combined)
View(forest_monitoring)
# Selecciona las columnas necesarias de forest_monitoring
forest_selected <- forest_monitoring[, c("locality_key", "plot","tree_health", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une GBS y forest_monitoring seleccionando columnas específicas
df_combined <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
View(df_combined)
# Une datos de la data frame GBS y datos seleccionados de la data frame del monitoreo participativo forest_monitoring
df_combined_GBS <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
#Export data
write.csv(df_combined_GBS, "../outputs/df_GBS_metadata.csv", row.names = FALSE)
indices_diferentes <- which(df_combined_GBS$Nodes != df_combined_GBS$tree_nodes)
indices_diferentes
df_combined$Nodes != df_combined_GBS$tree_nodes$diferencias <- ifelse(df_combined_GBS$Nodes != df_combined_GBS$tree_nodes, paste(df_combined_GBS$Nodes != df_combined_GBS$tree_nodes, sep = " | "), NA)
View(forest_selected)
GBS <- read.xlsx("../metadata/GBS.xlsx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xlsx")
GBS <- read.xlsx("../metadata/GBS.xlsx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xlsx")
forest_selected <- forest_monitoring[, c("locality_key", "plot","tree_health", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une datos de la data frame GBS y datos seleccionados de la data frame del monitoreo participativo forest_monitoring
df_combined_GBS <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
View(df_combined_GBS)
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
# Filtrar eliminando las filas con ID específicos
df_combined <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
library(dplyr)
#Load libraries
library(tidyverse)
#Load libraries
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)
library(car)
library(MASS)
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
# Filtrar eliminando las filas con ID específicos
df_combined <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
# Filtrar eliminando las filas con ID específicos
df_combined_GBS <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
#Export data
write.csv(df_combined_GBS, "../outputs/df_GBS_metadata.csv", row.names = FALSE)
# Identificar las filas donde las columnas son diferentes
diferencias <- df_combined_GBS[df_combined_GBS$Plot_GBS != df_combined_GBS$plot, ]
# Mostrar las filas con diferencias junto con la columna tree_ind
diferencias <- diferencias[, c("tree_ind", "Plot_GBS", "plot")]
# Mostrar las filas con diferencias junto con la columna tree_ind
diferencias <- diferencias[, c("tree_id", "Plot_GBS", "plot")]
# Ver las diferencias
print(diferencias)
# Identificar las filas donde las columnas son diferentes
diferencias <- df_combined_GBS[df_combined_GBS$Plot_GBS != df_combined_GBS$plot, ]
# Mostrar las filas con diferencias junto con la columna tree_ind
diferencias <- diferencias[, c( "Plot_GBS", "plot")]
# Ver las diferencias
print(diferencias)
View(forest_monitoring)
# Filtrar filas donde las columnas son diferentes
diferencias <- df_combined_GBS %>%
filter(Plot_GBS != plot) %>%
select(tree_ind, Plot_GBS, plot)
# Filtrar filas donde las columnas son diferentes
diferencias <- df_combined_GBS %>%
filter(Plot_GBS != plot) %>%
select(tree_id, Plot_GBS, plot)
# Filtrar filas donde las columnas son diferentes
diferencias <- df_combined_GBS %>%
filter(Plot_GBS != plot) %>%
select(tree_id, Plot_GBS, plot)
# Ver las diferencias
print(diferencias)
# Filtrar filas donde las columnas son diferentes
diferencias <- df_combined_GBS %>%
filter(Plot_GBS == plot) %>%
select(tree_id, Plot_GBS, plot)
# Ver las diferencias
print(diferencias)
View(df_combined_GBS)
diferencias <- df_combined_GBS %>%
filter(is.na(Plot_GBS) | is.na(plot) | Plot_GBS != plot) %>%
select(tree_id, Plot_GBS, plot)
if (nrow(diferencias) == 0) {
print("No hay diferencias entre las columnas.")
} else {
print("Diferencias encontradas (incluyendo NA):")
print(diferencias)
}
# Une datos de la data frame GBS y datos seleccionados de la data frame del monitoreo participativo forest_monitoring
df_combined_GBS <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
diferencias <- df_combined_GBS %>%
filter(is.na(Plot_GBS) | is.na(plot) | Plot_GBS != plot) %>%
select(tree_id, Plot_GBS, plot)
if (nrow(diferencias) == 0) {
print("No hay diferencias entre las columnas.")
} else {
print("Diferencias encontradas (incluyendo NA):")
print(diferencias)
}
if (nrow(diferencias) == 0) {
print("No hay diferencias entre las columnas.")
} else {
print("Diferencias encontradas (incluyendo NA):")
print(diferencias)
}
print("Diferencias encontradas (incluyendo NA):")
print(diferencias)
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
# Filtrar eliminando las filas con ID específicos
df_combined_GBS <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
GBS <- read.xlsx("../metadata/GBS.xlsx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xlsx")
forest_selected <- forest_monitoring[, c("locality_key", "plot","tree_health", "X_coordinates_latitude",
"X_coordinates_longitude", "X_coordinates_altitude",
"person_key", "tree_number", "tree_diameter_category",
"tree_heigth", "tree_nodes", "ozone_damage_percentage",
"other_damages_percentage", "other_damages_percentage.less_10",
"other_damages_percentage.10.40", "other_damages_percentage.50",
"other_damages_percentage.50.70", "other_damages_percentage.70.100",
"bud", "branch_nodes", "nodes_with_leaves", "cones",
"cone_sex", "tree_exposition", "surronding_vegetation.fir",
"surronding_vegetation.pine", "surronding_vegetation.oak",
"surronding_vegetation.bush", "surronding_vegetation.grass",
"surronding_vegetation.other", "reforested", "tree_id")]
# Une datos de la data frame GBS y datos seleccionados de la data frame del monitoreo participativo forest_monitoring
df_combined_GBS <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
# Filtrar eliminando las filas con ID específicos
df_combined_GBS <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
#Export data
write.csv(df_combined_GBS, "../outputs/df_GBS_metadata.csv", row.names = FALSE)
Epi_GBS_1 <- read.xlsx("../metadata/Epi-GBS/EpyGbs_Illumina_PstI-PlatePositions_JPJaramillo_20230619_Plate1.xlsx")
View(Epi_GBS_1)
Epi_GBS <- read.xlsx("../metadata/Epi_GBS.xlsx")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Load libraries
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr)
library(car)
library(MASS)
# Cargar datos de secuenciacion y datos del monitoreo participativo
GBS <- read.xlsx("../metadata/GBS.xlsx")
Epi_GBS <- read.xlsx("../metadata/Epi_GBS.xlsx")
forest_monitoring <- read.xlsx("../metadata/muestreo_dic2020_tidy.xlsx")
# Selecciona las columnas de informacion del data frame del monitoreo participativo para incluirlas en la muestras que se secuenciaron por GBS
forest_selected <- forest_monitoring[, c("locality_key", "plot","tree_health", "X_coordinates_latitude","X_coordinates_longitude", "X_coordinates_altitude","person_key", "tree_number", "tree_diameter_category", "tree_heigth", "tree_nodes", "ozone_damage_percentage", "other_damages_percentage", "other_damages_percentage.less_10", "other_damages_percentage.10.40", "other_damages_percentage.50","other_damages_percentage.50.70","other_damages_percentage.70.100", "bud", "branch_nodes", "nodes_with_leaves", "cones", "cone_sex", "tree_exposition", "surronding_vegetation.fir","surronding_vegetation.pine", "surronding_vegetation.oak", "surronding_vegetation.bush", "surronding_vegetation.grass", "surronding_vegetation.other", "reforested", "tree_id")]
# Une datos de la data frame GBS y datos seleccionados de la data frame del monitoreo participativo forest_monitoring
df_combined_GBS <- merge(GBS, forest_selected, by = "tree_id",all.x = TRUE)
#Detectar diferencias entre 2 columnas
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
# Filtrar eliminando las filas con ID específicos
df_combined_GBS <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
View(forest_monitoring)
View(Epi_GBS)
#Detectar diferencias entre 2 columnas
#Descartar B122, G110, G63 porque el número de nodos o el numero de parcela difiere entre ambas bases
#| Sampe     |       Database     |    Plot  |
#|-----------|-------------------|-----------|
#| B122      | forest_monitoring |    39     | # Hay 2  valores uno es B121
#| B122      |        GBS        |    39     |
#| G110      | forest_monitoring |  35 y 33  | # Hay 2  valores una era G113(35)
#| G110      |        GBS        |    30     |
#|  G63      | forest_monitoring |    20     | # Hay 2  valores una es G63 y otra G163
#|  G63      |        GBS        |    20     |
# Los detecte porque al combinar las bases de datos se duplicaban los datos de esas muestras y cambiaba el numero total de muestras
# Filtrar eliminando las filas con ID específicos
df_combined_GBS <- df_combined_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
# Agregar las coordenadas de las muestras que tenemos el transcriptoma:
# Latitude: 19.285 N
#Longitude: -99.301 E
# Crear un vector con las coordenadas faltantes de las muestras de datos transcriptomicos
latitudes_faltantes <- c(
"VD01" = "19.285",
"VD02" = "19.285",
"VD03" = "19.285",
"VD04" = "19.285",
"VD05" = "19.285",
"VS01" = "19.285",
"VS02" = "19.285",
"VS03" = "19.285",
"VS04" = "19.285",
"VS05" = "19.285",
"VS03" = "19.285",
"VD02r" = "19.285",
"VD03r" = "19.285",
"VD04r" = "19.285",
"VS04r" = "19.285"
)
longitudes_faltantes <- c(
"VD01" = "-99.301",
"VD02" = "-99.301",
"VD03" = "-99.301",
"VD04" = "-99.301",
"VD05" = "-99.301",
"VS01" = "-99.301",
"VS02" = "-99.301",
"VS03" = "-99.301",
"VS04" = "-99.301",
"VS05" = "-99.301",
"VS03" = "-99.301",
"VD02r" = "-99.301",
"VD03r" = "-99.301",
"VD04r" = "-99.301",
"VS04r" = "-99.301"
)
#Agrega las latitudes y longitudes faltantes de las muestras que tienen datos transcriptomicos
df_combined_GBS <- df_combined_GBS %>%
mutate(X_coordinates_latitude = ifelse(
is.na(X_coordinates_latitude),                # Si el valor de Coordenadas es NA
latitudes_faltantes[tree_id],         # Asignar el valor correspondiente del vector
X_coordinates_latitude                        # Mantener el valor original si no es NA
))
df_combined_GBS <- df_combined_GBS %>%
mutate(X_coordinates_longitude = ifelse(
is.na(X_coordinates_longitude),                # Si el valor de Coordenadas es NA
longitudes_faltantes[tree_id],         # Asignar el valor correspondiente del vector
X_coordinates_longitude                        # Mantener el valor original si no es NA
))
#Export data
write.csv(df_combined_GBS, "../outputs/df_GBS_metadata.csv", row.names = FALSE)
# Selecciona las columnas de informacion del data frame del monitoreo participativo para incluirlas en la muestras que se secuenciaron por GBS
forest_selected <- forest_monitoring[, c("locality_key", "plot","tree_health", "X_coordinates_latitude","X_coordinates_longitude", "X_coordinates_altitude","person_key", "tree_number", "tree_diameter_category", "tree_heigth", "tree_nodes", "ozone_damage_percentage", "other_damages_percentage", "other_damages_percentage.less_10", "other_damages_percentage.10.40", "other_damages_percentage.50","other_damages_percentage.50.70","other_damages_percentage.70.100", "bud", "branch_nodes", "nodes_with_leaves", "cones", "cone_sex", "tree_exposition", "surronding_vegetation.fir","surronding_vegetation.pine", "surronding_vegetation.oak", "surronding_vegetation.bush", "surronding_vegetation.grass", "surronding_vegetation.other", "reforested", "tree_id")]
# Une datos de la data frame GBS y datos seleccionados de la data frame del monitoreo participativo forest_monitoring
df_combined_Epi_GBS <- merge(Epi_GBS, forest_selected, by = "tree_id",all.x = TRUE)
# Filtrar eliminando las filas con ID específicos
df_combined_Epi_GBS <- df_combined_Epi_GBS %>%
filter(!tree_id %in% c("B112", "G110", "G63"))
#Agrega las latitudes y longitudes faltantes de las muestras que tienen datos transcriptomicos
df_combined_Epi_GBS <- df_combined_Epi_GBS %>%
mutate(X_coordinates_latitude = ifelse(
is.na(X_coordinates_latitude),                # Si el valor de Coordenadas es NA
latitudes_faltantes[tree_id],         # Asignar el valor correspondiente del vector
X_coordinates_latitude                        # Mantener el valor original si no es NA
))
df_combined_Epi_GBS <- df_combined_Epi_GBS %>%
mutate(X_coordinates_longitude = ifelse(
is.na(X_coordinates_longitude),                # Si el valor de Coordenadas es NA
longitudes_faltantes[tree_id],         # Asignar el valor correspondiente del vector
X_coordinates_longitude                        # Mantener el valor original si no es NA
))
#Export data
write.csv(df_combined_Epi_GBS, "../outputs/df_Epi_GBS_metadata.csv", row.names = FALSE)
View(df_combined_Epi_GBS)
#LOAD LIBRARIES
```{r, include=FALSE}
